/*
 * Assessment Network API
 * > Stores content for the Assessment Network  API Version is specified in the URL path as `api/<version>/resource` Version will default to the latest if it's ommited  All endpoints require an API key to be passed in the request header. API keys can be obtained by members at www.a15k.org. 
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package org.a15k.client.v1.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.UUID;

/**
 * The container for all of the content needed to present an assessment and to grade it. E.g. for a multiple-choice assessment, the variant would contain the stem, the answer choices, and the correct choice would be flagged.  Assessments typically only have one variant. Multiple variantss are allowed to support generative assessments.  A generative assessment is a single assessment that has many variants, which are often randomly generated.  Typically, the author of a generative assessment uses a small amount of code to create many variants of the same question where all of the numbers change between variants. Because these variants are essentially the same one original question, we bundle them all under one Assessment. 
 */
@ApiModel(description = "The container for all of the content needed to present an assessment and to grade it. E.g. for a multiple-choice assessment, the variant would contain the stem, the answer choices, and the correct choice would be flagged.  Assessments typically only have one variant. Multiple variantss are allowed to support generative assessments.  A generative assessment is a single assessment that has many variants, which are often randomly generated.  Typically, the author of a generative assessment uses a small amount of code to create many variants of the same question where all of the numbers change between variants. Because these variants are essentially the same one original question, we bundle them all under one Assessment. ")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-11-14T10:14:33.057-06:00")
public class Variant {
  @SerializedName("format_id")
  private UUID formatId = null;

  @SerializedName("source_identifier")
  private String sourceIdentifier = null;

  @SerializedName("content")
  private String content = null;

  @SerializedName("preview_html")
  private String previewHtml = null;

  public Variant formatId(UUID formatId) {
    this.formatId = formatId;
    return this;
  }

   /**
   * The uuid of a previously registered format
   * @return formatId
  **/
  @ApiModelProperty(required = true, value = "The uuid of a previously registered format")
  public UUID getFormatId() {
    return formatId;
  }

  public void setFormatId(UUID formatId) {
    this.formatId = formatId;
  }

  public Variant sourceIdentifier(String sourceIdentifier) {
    this.sourceIdentifier = sourceIdentifier;
    return this;
  }

   /**
   * A member-provided identifier for this variant; useful if multiple variants are contributed (for a generative assessment) but not required.
   * @return sourceIdentifier
  **/
  @ApiModelProperty(value = "A member-provided identifier for this variant; useful if multiple variants are contributed (for a generative assessment) but not required.")
  public String getSourceIdentifier() {
    return sourceIdentifier;
  }

  public void setSourceIdentifier(String sourceIdentifier) {
    this.sourceIdentifier = sourceIdentifier;
  }

  public Variant content(String content) {
    this.content = content;
    return this;
  }

   /**
   * The content of the variant. The formatting the the content is indicated by the assessment&#39;s linked format
   * @return content
  **/
  @ApiModelProperty(required = true, value = "The content of the variant. The formatting the the content is indicated by the assessment's linked format")
  public String getContent() {
    return content;
  }

  public void setContent(String content) {
    this.content = content;
  }

  public Variant previewHtml(String previewHtml) {
    this.previewHtml = previewHtml;
    return this;
  }

   /**
   * If provided, will be used to generate a preview on the a15k website
   * @return previewHtml
  **/
  @ApiModelProperty(value = "If provided, will be used to generate a preview on the a15k website")
  public String getPreviewHtml() {
    return previewHtml;
  }

  public void setPreviewHtml(String previewHtml) {
    this.previewHtml = previewHtml;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Variant variant = (Variant) o;
    return Objects.equals(this.formatId, variant.formatId) &&
        Objects.equals(this.sourceIdentifier, variant.sourceIdentifier) &&
        Objects.equals(this.content, variant.content) &&
        Objects.equals(this.previewHtml, variant.previewHtml);
  }

  @Override
  public int hashCode() {
    return Objects.hash(formatId, sourceIdentifier, content, previewHtml);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Variant {\n");
    
    sb.append("    formatId: ").append(toIndentedString(formatId)).append("\n");
    sb.append("    sourceIdentifier: ").append(toIndentedString(sourceIdentifier)).append("\n");
    sb.append("    content: ").append(toIndentedString(content)).append("\n");
    sb.append("    previewHtml: ").append(toIndentedString(previewHtml)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

